// Generated by Haxe 3.3.0
(function () { "use strict";
Math.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var webgldoc_ErrorDisplay = function() {
	this.element = window.document.getElementById("error_display");
};
webgldoc_ErrorDisplay.__name__ = true;
webgldoc_ErrorDisplay.prototype = {
	isInitializedError: function() {
		return window.XMLHttpRequest == null;
	}
	,showInitializedError: function() {
		this.show("Your browser is not supported XMLHttpRequest.");
	}
	,showAssetsJsonLoadError: function(jsonUri) {
		this.show("load error: " + jsonUri);
	}
	,showAssetsLoadError: function(result) {
		this.show(result == flwebgl.Player.E_CONTEXT_CREATION_FAILED?"Your browser is not supported WebGL.":result == flwebgl.Player.E_REQUIRED_EXTENSION_NOT_PRESENT?"Your browser WebGL extension is not supported in this page.":"error");
	}
	,show: function(message) {
		this.element.style.display = "block";
		this.element.innerText = message;
	}
};
var webgldoc_Main = function() {
	var _gthis = this;
	this.errorDisplay = new webgldoc_ErrorDisplay();
	if(this.errorDisplay.isInitializedError()) {
		this.errorDisplay.showInitializedError();
		return;
	}
	this.player = new flwebgl.Player();
	this.canvas = window.document.getElementById("canvas");
	this.assetsJsonLoader = new webgldoc_load_AssetsJsonLoader();
	this.assetsLoader = new webgldoc_load_AssetsLoader(this.player,this.canvas);
	this.mainFunction = $bind(this,this.initializeToLoadAssetsJson);
	this.timer = new haxe_Timer(41);
	this.timer.run = function() {
		_gthis.run();
	};
};
webgldoc_Main.__name__ = true;
webgldoc_Main.main = function() {
	window.document.addEventListener("DOMContentLoaded",function() {
		new webgldoc_Main();
	});
};
webgldoc_Main.prototype = {
	run: function() {
		this.mainFunction();
	}
	,initializeToLoadAssetsJson: function() {
		this.assetsJsonLoader.execute();
		this.mainFunction = $bind(this,this.loadAssetsJson);
	}
	,loadAssetsJson: function() {
		this.assetsJsonLoader.run();
		var _g = this.assetsJsonLoader.getEvent();
		switch(_g[1]) {
		case 0:
			return;
		case 1:
			this.showAssetsJsonLoadError(_g[2]);
			break;
		case 2:
			this.initializeToLoadAssets();
			break;
		}
	}
	,showAssetsJsonLoadError: function(jsonUri) {
		this.errorDisplay.showAssetsJsonLoadError(jsonUri);
		this.timer.stop();
	}
	,initializeToLoadAssets: function() {
		this.assetsLoader.execute(this.assetsJsonLoader.structureJsonLoader.json,this.assetsJsonLoader.textureAtlasSet);
		this.mainFunction = $bind(this,this.loadAssets);
	}
	,loadAssets: function() {
		var _g = this.assetsLoader.getEvent();
		switch(_g[1]) {
		case 0:
			return;
		case 1:
			this.showAssetsLoadError(_g[2]);
			break;
		case 2:
			this.initializeToPlay();
			break;
		}
	}
	,showAssetsLoadError: function(playerInitializedResult) {
		this.errorDisplay.showAssetsLoadError(playerInitializedResult);
		this.timer.stop();
	}
	,initializeToPlay: function() {
		var width = this.player.getStageWidth();
		var height = this.player.getStageHeight();
		this.canvas.width = width;
		this.canvas.height = height;
		this.player.setViewport(new flwebgl.geom.Rect(0,0,width,height));
		this.player.play();
		this.mainFunction = $bind(this,this.play);
	}
	,play: function() {
	}
};
var webgldoc_URI = function() { };
webgldoc_URI.__name__ = true;
var webgldoc_load_AssetsJsonUtil = function() { };
webgldoc_load_AssetsJsonUtil.__name__ = true;
webgldoc_load_AssetsJsonUtil.getStructureURI = function(assetsJson) {
	return "assets/" + assetsJson.structure;
};
webgldoc_load_AssetsJsonUtil.getTextureAtlasJsonURI = function(assetsJson,textureAtlasIndex) {
	return "assets/" + assetsJson.atlas[textureAtlasIndex][0];
};
webgldoc_load_AssetsJsonUtil.getTextureAtlasImageURI = function(assetsJson,textureAtlasIndex) {
	return "assets/" + assetsJson.atlas[textureAtlasIndex][1];
};
var webgldoc_load_AssetsJsonLoaderEvent = { __ename__ : true, __constructs__ : ["LOADING","ERROR","SUCCESS"] };
webgldoc_load_AssetsJsonLoaderEvent.LOADING = ["LOADING",0];
webgldoc_load_AssetsJsonLoaderEvent.LOADING.__enum__ = webgldoc_load_AssetsJsonLoaderEvent;
webgldoc_load_AssetsJsonLoaderEvent.ERROR = function(fileName) { var $x = ["ERROR",1,fileName]; $x.__enum__ = webgldoc_load_AssetsJsonLoaderEvent; return $x; };
webgldoc_load_AssetsJsonLoaderEvent.SUCCESS = ["SUCCESS",2];
webgldoc_load_AssetsJsonLoaderEvent.SUCCESS.__enum__ = webgldoc_load_AssetsJsonLoaderEvent;
var webgldoc_load_AssetsJsonLoader = function() {
	this.textureAtlasSet = [];
	this.assetsJsonLoader = new webgldoc_load_JsonLoader("assets.json");
};
webgldoc_load_AssetsJsonLoader.__name__ = true;
webgldoc_load_AssetsJsonLoader.prototype = {
	getEvent: function() {
		var n = this.event;
		this.event = webgldoc_load_AssetsJsonLoaderEvent.LOADING;
		return n;
	}
	,run: function() {
		this.mainFunction();
	}
	,execute: function() {
		this.loadedIndex = 0;
		this.event = webgldoc_load_AssetsJsonLoaderEvent.LOADING;
		this.initializeToLoadAssetsJson();
	}
	,initializeToLoad: function(jsonLoader,nextFunction) {
		this.jsonLoader = jsonLoader;
		this.nextFunction = nextFunction;
		jsonLoader.execute();
		this.mainFunction = $bind(this,this.load);
	}
	,load: function() {
		var _g = this.jsonLoader.getEvent();
		switch(_g[1]) {
		case 0:
			return;
		case 1:
			this.nextFunction();
			break;
		case 2:
			this.event = webgldoc_load_AssetsJsonLoaderEvent.ERROR(_g[2]);
			break;
		}
	}
	,initializeToLoadAssetsJson: function() {
		this.initializeToLoad(this.assetsJsonLoader,$bind(this,this.finishToLoadAssetsJson));
	}
	,finishToLoadAssetsJson: function() {
		this.assetsJson = this.assetsJsonLoader.json;
		this.initializeToLoadStructureJson();
	}
	,initializeToLoadStructureJson: function() {
		this.structureJsonLoader = new webgldoc_load_JsonLoader(webgldoc_load_AssetsJsonUtil.getStructureURI(this.assetsJson));
		this.initializeToLoad(this.structureJsonLoader,$bind(this,this.initializeToLoadTextureAtlasJson));
	}
	,initializeToLoadTextureAtlasJson: function() {
		this.textureAtlasJsonLoader = new webgldoc_load_JsonLoader(webgldoc_load_AssetsJsonUtil.getTextureAtlasJsonURI(this.assetsJson,this.loadedIndex));
		this.initializeToLoad(this.textureAtlasJsonLoader,$bind(this,this.finish));
	}
	,finish: function() {
		this.textureAtlasSet.push(new flwebgl.TextureAtlas(this.textureAtlasJsonLoader.json,webgldoc_load_AssetsJsonUtil.getTextureAtlasImageURI(this.assetsJson,this.loadedIndex)));
		if(this.loadedIndex < this.assetsJson.atlas.length - 1) {
			this.loadedIndex++;
			this.initializeToLoadTextureAtlasJson();
		} else {
			this.event = webgldoc_load_AssetsJsonLoaderEvent.SUCCESS;
		}
	}
};
var webgldoc_load_AssetsLoaderEvent = { __ename__ : true, __constructs__ : ["LOADING","ERROR","SUCCESS"] };
webgldoc_load_AssetsLoaderEvent.LOADING = ["LOADING",0];
webgldoc_load_AssetsLoaderEvent.LOADING.__enum__ = webgldoc_load_AssetsLoaderEvent;
webgldoc_load_AssetsLoaderEvent.ERROR = function(number) { var $x = ["ERROR",1,number]; $x.__enum__ = webgldoc_load_AssetsLoaderEvent; return $x; };
webgldoc_load_AssetsLoaderEvent.SUCCESS = ["SUCCESS",2];
webgldoc_load_AssetsLoaderEvent.SUCCESS.__enum__ = webgldoc_load_AssetsLoaderEvent;
var webgldoc_load_AssetsLoader = function(player,canvas) {
	this.player = player;
	this.canvas = canvas;
};
webgldoc_load_AssetsLoader.__name__ = true;
webgldoc_load_AssetsLoader.prototype = {
	getEvent: function() {
		var n = this.event;
		this.event = webgldoc_load_AssetsLoaderEvent.LOADING;
		return n;
	}
	,execute: function(structureJson,textureAtlasSet) {
		this.event = webgldoc_load_AssetsLoaderEvent.LOADING;
		this.result = this.player.init(this.canvas,structureJson,textureAtlasSet,$bind(this,this.handleComplete));
		if(this.result != flwebgl.Player.S_OK) {
			this.event = webgldoc_load_AssetsLoaderEvent.ERROR(this.result);
		}
	}
	,handleComplete: function() {
		this.event = webgldoc_load_AssetsLoaderEvent.SUCCESS;
	}
};
var webgldoc_load_JsonLoaderEvent = { __ename__ : true, __constructs__ : ["LOADING","LOAD_SUCCESS","LOAD_ERROR"] };
webgldoc_load_JsonLoaderEvent.LOADING = ["LOADING",0];
webgldoc_load_JsonLoaderEvent.LOADING.__enum__ = webgldoc_load_JsonLoaderEvent;
webgldoc_load_JsonLoaderEvent.LOAD_SUCCESS = ["LOAD_SUCCESS",1];
webgldoc_load_JsonLoaderEvent.LOAD_SUCCESS.__enum__ = webgldoc_load_JsonLoaderEvent;
webgldoc_load_JsonLoaderEvent.LOAD_ERROR = function(url) { var $x = ["LOAD_ERROR",2,url]; $x.__enum__ = webgldoc_load_JsonLoaderEvent; return $x; };
var webgldoc_load_JsonLoader = function(url) {
	this.url = url;
};
webgldoc_load_JsonLoader.__name__ = true;
webgldoc_load_JsonLoader.prototype = {
	getEvent: function() {
		var n = this.event;
		this.event = webgldoc_load_JsonLoaderEvent.LOADING;
		return n;
	}
	,execute: function() {
		var _gthis = this;
		this.event = webgldoc_load_JsonLoaderEvent.LOADING;
		this.xMLHttpRequest = new XMLHttpRequest();
		this.xMLHttpRequest.onreadystatechange = function() {
			if(_gthis.xMLHttpRequest.readyState != 4) {
				return;
			}
			if(_gthis.xMLHttpRequest.status == 200) {
				_gthis.event = webgldoc_load_JsonLoaderEvent.LOAD_SUCCESS;
				_gthis.json = JSON.parse(_gthis.xMLHttpRequest.response);
			} else {
				_gthis.event = webgldoc_load_JsonLoaderEvent.LOAD_ERROR(_gthis.url);
			}
		};
		this.xMLHttpRequest.open("GET",this.url,true);
		this.xMLHttpRequest.send();
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
webgldoc_Main.FPS = 24;
webgldoc_URI.ASSETS_JSON = "assets.json";
webgldoc_URI.ASSETS_DIRECTORY = "assets/";
webgldoc_Main.main();
})();

//# sourceMappingURL=main.js.map